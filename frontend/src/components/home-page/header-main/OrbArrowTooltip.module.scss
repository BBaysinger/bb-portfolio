@use "@/styles/variables" as *;

.orbArrowTooltip {
  position: absolute;
  z-index: 1000;
  display: block;
  color: #fff;
  bottom: 0;
  right: 0;
  pointer-events: none;
  transform-origin: bottom right;

  &::after {
    content: " ";
    position: absolute;
    width: 120px;
    height: 120px;
    left: -114px;
    top: -114px;
    pointer-events: none;
    background-repeat: no-repeat;
    mask-image: url("/images/home/orb-arrow-tooltip.svg");
    mask-repeat: no-repeat;
    mask-size: cover;
    animation: bounceMask 2s infinite forwards;

    :global(.notDragged) & {
      background-color: $lighterThemeColor;
    }

    :global(.hasDragged) & {
      background-color: #ff0;
    }
  }

  // Hide permanently after wall collision
  :global(.hasCollided) & {
    display: none !important;
  }

  // Hide temporarily only when slinger is in flight (after release, not during drag)
  // This requires the isSlingerInFlight state to be exposed as a CSS class
  :global(.slingerInFlight.notCollided) & {
    opacity: 0;
    pointer-events: none;
  }
}

.tooltipText {
  position: absolute;
  width: 200px;
  height: 2em;
  right: 0;
  bottom: -50%;
  rotate: 45deg;
  transform-origin: bottom right;
  transform: translate(10px, 52%);
  animation: bounceClip 2s infinite forwards;

  &::before {
    content: "Grab the orb! Grab the orb! Grab the orb!\00a0";
    position: absolute;
    top: 50%;
    left: 0;
    margin-top: 0;
    white-space: nowrap;
    text-align: right;
    transform-origin: bottom right;
    display: block;
    animation: scrollText 2s linear infinite;
    width: max-content;
    :global(.hasDragged) & {
      content: "Give a toss! Give a toss! Give a toss!\00a0";
    }
  }
}

@keyframes bounceClip {
  0% {
    clip-path: inset(0 42px 0 58px);
  }
  50% {
    clip-path: inset(0 69px 0 29px);
  }
  100% {
    clip-path: inset(0 42px 0 58px);
  }
}

@keyframes scrollText {
  0% {
    transform: translate(0%, -50%);
  }
  100% {
    transform: translate(-33%, -50%);
  }
}

@keyframes bounceMask {
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(-20px, -20px);
  }
  100% {
    transform: translate(0, 0);
  }
}
