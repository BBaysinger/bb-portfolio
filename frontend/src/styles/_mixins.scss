@use "sass:math";
@use "sass:map";
@use "sass:string";
@use "sass:meta";
@use "@/styles/variables" as *;

//////////////////////////////////////////////////////////////////////////
// Responsive Breakpoints
//////////////////////////////////////////////////////////////////////////

/// Mobile-first media query mixin
/// Usage: Apply styles starting from the specified breakpoint and up.
///
/// @example
/// .example {
///   @include breakpointUp($b768px) {
///     background-color: $lighterThemeColor;
///   }
/// }
@mixin breakpointUp($breakpoint) {
  $min-width: map.get($breakpoints, $breakpoint);
  @if $min-width != null {
    @media screen and (min-width: $min-width) {
      @content;
    }
  } @else {
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  }
}

//////////////////////////////////////////////////////////////////////////
// Unit Helpers
//////////////////////////////////////////////////////////////////////////

/// Removes the unit from a numeric CSS value for use in calculations
@function stripUnit($value) {
  @return math.div($value, $value * 0 + 1);
}

/// Ensures a value has a specific unit
@function ensureUnit($value, $unit) {
  @if meta.type-of($value) != "number" {
    @error "ensureUnit() expected a number, got: #{meta.inspect($value)}";
  }

  @if not math.is-unitless($value) {
    @return $value; // already has a unit
  }

  @if $unit == "px" {
    @return $value * 1px;
  } @else if $unit == "vw" {
    @return $value * 1vw;
  } @else if $unit == "rem" {
    @return $value * 1rem;
  } @else {
    @error "Unknown unit passed to ensureUnit(): `#{$unit}`";
  }
}

/// Converts pixel values to rems
/// @param $px - Pixel value
/// @param $base - Root font size (default: 16px)
/// @return rem-converted value
@function to-rems($value, $base: 16px) {
  $unit: math.unit($value);

  @if $unit == "px" {
    @return math.div($value, $base) * 1rem;
  } @else if $unit == "rem" {
    @return $value;
  } @else if $unit == "" {
    @return $value * 1rem;
  } @else {
    // fallback: convert to rem based on base font size
    @warn "to-rems(): Unsupported unit '#{$unit}'. Returning unconverted.";
    @return $value;
  }
}

/// Rounds a number to a given number of decimal places
@function rnd($number, $places: 0) {
  $n: 1;
  @if $places > 0 {
    @for $i from 1 through $places {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

//////////////////////////////////////////////////////////////////////////
// SVG Trickery
//////////////////////////////////////////////////////////////////////////

/// Builds a minimal inline SVG data URL for background or masking
/// Assumes path is scaled to a 1in x 1in viewbox
///
/// @example
/// mask-image: svg("M0,0v72h72V0H0Z");
@function svg($d, $color: #fff) {
  $color-string: if(meta.type-of($color) == "string", $color, "#{$color}");
  $formatted-color: if(
    string.index($color-string, "#") == 1,
    "%23#{string.slice($color-string, 2)}",
    $color-string
  );

  @return string.unquote(
    "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' " +
      "viewBox='0 0 72 72'%3E%3Cpath d='#{$d}' fill='#{$formatted-color}'/%3E%3C/svg%3E\")"
  );
}

//////////////////////////////////////////////////////////////////////////
// UI Animation Pausing Utilities
//////////////////////////////////////////////////////////////////////////

/// Pauses animations when the hero is in view
@mixin pauseWhenHeroVisible {
  animation-play-state: running;

  :global(.isHeroInView) & {
    animation-play-state: paused !important;
  }
}

/// Resumes nav animations when the mobile nav is expanded
@mixin pauseUnlessMobileNavExpanded {
  animation-play-state: paused;

  :global(.isMobileNavExpanded) & {
    animation-play-state: running !important;
  }
}

//////////////////////////////////////////////////////////////////////////
// Fluid Scaling with Custom Properties
//////////////////////////////////////////////////////////////////////////

/// Generates a CSS variable reference like var(--fluid-percent-360-1440)
@function percent-var($min, $max) {
  $min-stripped: stripUnit($min);
  $max-stripped: stripUnit($max);
  @return string.unquote(
    "var(--fluid-percent-#{$min-stripped}-#{$max-stripped})"
  );
}

/// Applies a fluidly scaled CSS property using CSS custom properties
/// Values will interpolate between min and max across a viewport range
///
/// @param $property - The CSS property to scale
/// @param $min-px - The value at the smallest viewport width
/// @param $max-px - The value at the largest viewport width
/// @param $min-vw - The minimum viewport width (default: $b320)
/// @param $max-vw - The maximum viewport width (default: $b1600)
///
/// @example
/// @include remRange(font-size, 16px, 48px, 360, 1440);
@mixin remRange(
  $property,
  $min-value,
  $max-value,
  $min-vw: $b320,
  $max-vw: $b1600
) {
  $min-rem: to-rems($min-value);
  $max-rem: to-rems($max-value);

  @if math.unit($min-rem) != "rem" or math.unit($max-rem) != "rem" {
    @warn "remRange(): Values are not in px/rem. Falling back to unconverted interpolation.";
    #{$property}: calc(
      #{$min-value} +
        (
          #{stripUnit($max-value - $min-value)} *
            #{percent-var($min-vw, $max-vw)}
        )
    );
  } @else {
    $range: rnd($max-rem - $min-rem, 4);
    $percent-var: percent-var($min-vw, $max-vw);
    #{$property}: calc(#{$min-rem} + #{$range} * #{$percent-var});
  }
}

/// Applies a fluid CSS property using native `calc()` math directly in the rule.
///
/// This mixin does not rely on `rem` or custom properties. Instead, it linearly
/// interpolates a CSS value (e.g. `px`, `em`, `%`, etc.) between a minimum and
/// maximum viewport width. This is ideal when you want to keep your scaling unit
/// consistent (like pixel precision or em spacing) and avoid dependency on root font size.
///
/// @param $property - The CSS property to scale (e.g. `margin-top`)
/// @param $min-px - The value at the minimum viewport width (in px or unit you want)
/// @param $max-px - The value at the maximum viewport width (same unit as $min-px)
/// @param $min-vw - Minimum viewport width in px or unitless (default: $b320)
/// @param $max-vw - Maximum viewport width in px or unitless (default: $b1600)
///
/// @example
/// @include rangeStatic(letter-spacing, 0.02em, 0.12em, 360, 1440);
/// @include rangeStatic(width, 120px, 360px); // defaults to 320–1600px viewport
@mixin staticRange(
  $property,
  $min-value,
  $max-value,
  $min-vw: $b320,
  $max-vw: $b1600
) {
  // Normalize viewports first — allow unitless values like 320 → 320px
  $min-vw: ensureUnit($min-vw, "px");
  $max-vw: ensureUnit($max-vw, "px");

  // Normalize value units (still allow unitless values if needed — optional!)
  $min-value: ensureUnit($min-value, math.unit($max-value));
  $max-value: ensureUnit($max-value, math.unit($min-value));

  // Extract units for validation
  $unit-min-vw: math.unit($min-vw);
  $unit-max-vw: math.unit($max-vw);
  $unit-min-value: math.unit($min-value);
  $unit-max-value: math.unit($max-value);

  // Ensure consistent units
  @if $unit-min-vw != $unit-max-vw {
    @error "Viewport units must match. Got: #{$unit-min-vw} and #{$unit-max-vw}";
  }
  @if $unit-min-value != $unit-max-value {
    @error "Value units must match. Got: #{$unit-min-value} and #{$unit-max-value}";
  }

  // Set the base value
  & {
    #{$property}: $min-value;
  }

  // Interpolate between min and max across the viewport range
  @media screen and (min-width: $min-vw) {
    #{$property}: calc(
      #{$min-value} +
        (
          #{stripUnit($max-value - $min-value)} *
            ((100vw - #{$min-vw}) / #{stripUnit($max-vw - $min-vw)})
        )
    );
  }

  // Set the maximum value explicitly
  @media screen and (min-width: $max-vw) {
    #{$property}: $max-value;
  }
}
