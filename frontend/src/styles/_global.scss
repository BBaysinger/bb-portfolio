@use "sass:math";
@use "sass:map";

// Breakpoint Base Variables (Unitless)
$b320: 320; // Ultra-narrow screens (e.g., smartwatches, highly compact UIs).
$b360: 360; // Baseline for smaller smartphones (practical starting point for mobile-first design).
$b480: 480; // Compact smartphones or foldables in phone mode (slightly larger mobile devices).
$b576: 576; // Small tablets in portrait mode or large phones in landscape.
$b640: 640; // Medium-sized smartphones or tablets in portrait mode.
$b768: 768; // Tablets in portrait mode or small landscape-oriented tablets.
$b992: 992; // Entry-level laptop screens or larger tablets in landscape.
$b1024: 1024; // Standard tablet landscape mode or compact laptops.
$b1280: 1280; // Modern laptops or smaller desktop screens (common starting point for desktop layouts).
$b1440: 1440; // High-resolution desktops or widescreen laptops.
$b1600: 1600; // Larger desktop screens, mid-size monitors.
$b1920: 1920; // Wide monitors or premium desktop setups (optimal for expansive layouts).
$b2200: 2200; // Ultra-wide monitors and 4K setups.

// Breakpoints w/ Units
$b320px: $b320 * 1px;
$b360px: $b360 * 1px;
$b480px: $b480 * 1px;
$b576px: $b576 * 1px;
$b640px: $b640 * 1px;
$b768px: $b768 * 1px;
$b992px: $b992 * 1px;
$b1024px: $b1024 * 1px;
$b1280px: $b1280 * 1px;
$b1440px: $b1440 * 1px;
$b1600px: $b1600 * 1px;
$b1920px: $b1920 * 1px;
$b2200px: $b2200 * 1px;

// Breakpoints map (Unitless) for iteration
$breakpoints: (
  320: $b320,
  360: $b360,
  480: $b480,
  576: $b576,
  640: $b640,
  768: $b768,
  992: $b992,
  1024: $b1024,
  1280: $b1280,
  1440: $b1440,
  1600: $b1600,
  1920: $b1920,
  2200: $b2200,
);

// Mixin for mobile-first media queries
// Usage: Apply styles starting from the specified breakpoint and up.
// Example:
// .example-class {
//   @include breakpoint-up($b768px) {
//     background-color: $lighterThemeColor;
//   }
// }
@mixin breakpoint-up($breakpoint) {
  $min-width: map.get($breakpoints, $breakpoint); // Correct Dart Sass syntax
  @if $min-width != null {
    @media screen and (min-width: $min-width) {
      @content;
    }
  } @else {
    // Handle raw values like '900px'
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  }
}

// Function to remove the unit from a CSS value
// This is useful for mathematical operations on CSS values
@function strip-unit($value) {
  // Divides the value by itself (multiplied by 0 plus 1) to effectively strip units
  @return math.div($value, $value * 0 + 1);
}

// Mixin to create a fluid property based on viewport width
// It interpolates between a minimum and maximum value as the viewport
// width scales between the two specified breakpoints
// Example:
// h1 {
//   @include fluid-property(height, $b320px, $b1024px, 50px, 200px);
// }
@mixin fluid-property($property, $min-vw, $max-vw, $min-value, $max-value) {
  // Extract units to ensure consistency for calculations
  $unit-min-vw: math.unit($min-vw);
  $unit-max-vw: math.unit($max-vw);
  $unit-min-value: math.unit($min-value);
  $unit-max-value: math.unit($max-value);

  // Ensure the viewport breakpoint units match
  @if $unit-min-vw != $unit-max-vw {
    @error "Viewport breakpoint units ($unit-min-vw, $unit-max-vw) must match!";
  }

  // Ensure value units are consistent
  @if $unit-min-value != $unit-max-value {
    @error "Property value units ($unit-min-value, $unit-max-value) must match!";
  }

  // Set the default (fallback) value for small screens
  & {
    #{$property}: $min-value;
  }

  // Set the fluid value between the breakpoints
  @media screen and (min-width: $min-vw) {
    #{$property}: calc(
      #{$min-value} +
        (
          #{strip-unit($max-value - $min-value)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        )
    );
  }

  // Set the maximum value explicitly for large screens
  @media screen and (min-width: $max-vw) {
    #{$property}: $max-value;
  }
}

//////////////////////////////////////////////////////////////////////////
// SVG Trickery
//////////////////////////////////////////////////////////////////////////

// Removes redundancy of the rest of the SVG XML and allows you to declare a
// shape with only the path data for a background or mask. It assumes your shape is
// within a 1in x 1in viewbox, which may require reauthoring for this use, but that's
// easy enough. In Illustrator, set the X and Y to 0,0 and scale the shape to fit a
// 1in x 1in bounds. Helps to round decimals to 2 places for brevity.
//
// Example:
// mask-image: svg("M0,0v72h72V0H0ZM22.33,55.31V16.69l36.27,19.31-36.27,19.31Z");
@function svg($d, $color: #fff) {
  // Ensure $color is treated as a string
  $color-string: if(meta.type-of($color) == "string", $color, "#{$color}");
  $formatted-color: if(
    string.index($color-string, "#") == 1,
    "%23#{string.slice($color-string, 2)}",
    $color-string
  );

  // Return the SVG as a data URL
  @return string.unquote(
    "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' " +
      "viewBox='0 0 72 72'%3E%3Cpath d='#{$d}' fill='#{$formatted-color}'/%3E%3C/svg%3E\")"
  );
}

//////////////////////////////////////////////////////////////////////////
// Text slide-in animation
//////////////////////////////////////////////////////////////////////////

// Height of top nav bar
$navBarHeight: 46px;
// For thin stokes and normal weight text.
$heavierThemeColor: #87ad26;
// For heavy strokes and as a fill.
$lighterThemeColor: rgba(141, 181, 40, 1); // #8DB528

$complimentaryThemeColor: #660099;

.nobr {
  white-space: nowrap;
}

//////////////////////////////////////////////////////////////////////////
// Text slide-in animation
//////////////////////////////////////////////////////////////////////////

:global {
  .fade-in {
    opacity: 0;
    transform: translateX(200px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;

    &.in-view {
      opacity: 1;
      transform: translateX(0);
    }
  }

  img.fade-in {
    transform: translateX(-100px);
  }

  h4.fade-in {
    transform: translateX(-300px);
  }
}

/////////////////////////////////////////////////////////////
// Forms
/////////////////////////////////////////////////////////////

.form {
  display: flex;
  flex-direction: row;
  gap: 10px;
  margin-bottom: 10px;
  flex-wrap: wrap;

  > p {
    font-size: 18px;
  }

  button {
    background-color: black;
    color: white;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    line-height: 1;
    padding-left: 12px;
    padding-right: 12px;
    border-radius: 4px;

    &:hover {
      background-color: #181818;
    }
  }

  label {
    width: 100%;
    margin-bottom: 10px;
    > *:first-child {
      margin-bottom: 3px;
    }
  }

  input,
  textarea,
  input:-webkit-autofill,
  input:-webkit-autofill:focus,
  input:-webkit-autofill:hover {
    background-color: #222 !important;
    box-shadow: inset 2px 2px 8px #000;
    border: 0;
    padding-left: 10px;
    color: white;
    border-radius: 4px;
    height: 36px;
    width: 200px;
    // Be sure fields are at least 16px to
    // avoid automatic zooming on mobile.
    font-size: 16px;
  }

  textarea {
    width: 100%;
    min-height: 200px;
  }

  input:focus,
  textarea:focus {
    outline: none;
  }
}

.error {
  height: 16px;
  color: #990000;
}
