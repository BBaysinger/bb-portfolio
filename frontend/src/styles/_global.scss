@use "sass:math";
@use "sass:map";

// Previous breakpoint definitions
// $ss: 360; // Super small (smartphones?)
// $xs: 480; // Extra small (smartphones)
// $sm: 768; // Small (Tablets)
// $md: 992; // Medium (Small laptops?)
// $lg: 1200; // Large (standard? desktops)
// $xl: 1400; // Extra large (large desktops)
// $sl: 1600;

// Base Variables (Unitless)
$b320: 320; // Ultra-narrow screens (e.g., smartwatches, highly compact UIs).
$b360: 360; // Baseline for smaller smartphones (practical starting point for mobile-first design).
$b480: 480; // Compact smartphones or foldables in phone mode (slightly larger mobile devices).
$b576: 576; // Small tablets in portrait mode or large phones in landscape.
$b768: 768; // Tablets in portrait mode or small landscape-oriented tablets.
$b992: 992; // Entry-level laptop screens or larger tablets in landscape.
$b1024: 1024; // Standard tablet landscape mode or compact laptops.
$b1280: 1280; // Modern laptops or smaller desktop screens (common starting point for desktop layouts).
$b1440: 1440; // High-resolution desktops or widescreen laptops.
$b1920: 1920; // Wide monitors or premium desktop setups (optimal for expansive layouts).

// Derived Variables (With Units)
$b320px: $b320 * 1px;
$b360px: $b360 * 1px;
$b480px: $b480 * 1px;
$b576px: $b576 * 1px;
$b768px: $b768 * 1px;
$b992px: $b992 * 1px;
$b1024px: $b1024 * 1px;
$b1280px: $b1280 * 1px;
$b1440px: $b1440 * 1px;
$b1920px: $b1920 * 1px;

// Breakpoints definition
$breakpoints: (
  320: $b320,
  360: $b360,
  480: $b480,
  576: $b576,
  768: $b768,
  992: $b992,
  1024: $b1024,
  1280: $b1280,
  1440: $b1440,
  1920: $b1920,
);

// Height of top nav bar
$navBarHeight: 46px;

// For thin stokes and normal weight text.
$heavierThemeColor: #719614;
// For heavy strokes and as a fill. (For contrast/readability)
$lighterThemeColor: #8db528;
$orange: #ff5e00;
$yellowOrange: #ffb600;
$red: #ff0000;

// Mixin for mobile-first media queries
// Usage: Apply styles starting from the specified breakpoint and up.
// Example:
// .example-class {
//   @include breakpoint-up(global.$b768) {
//     global.$background-color: blue;
//   }
// }
@mixin breakpoint-up($breakpoint) {
  $min-width: map.get(
    $breakpoints,
    $breakpoint
  ); // Get the breakpoint's value from the map
  @if $min-width != null {
    @media (min-width: $min-width) {
      // Apply styles when the viewport meets the minimum width
      @content;
    }
  }
}

// Function to remove the unit from a CSS value
// This is useful for mathematical operations on CSS values
@function strip-unit($value) {
  // Divides the value by itself (multiplied by 0 plus 1) to effectively strip units
  @return math.div($value, $value * 0 + 1);
}

// Mixin to create a fluid property based on viewport width
// It interpolates between a minimum and maximum value as the viewport
// width scales between the two specified breakpoints
// Example:
// h1 {
//   @include global.fluid-property(height, global.$xs, global.$xl, 50px, 200px);
// }
@mixin fluid-property($property, $min-vw, $max-vw, $min-value, $max-value) {
  // Extract units to ensure consistency for calculations
  $unit-min-vw: math.unit($min-vw);
  $unit-max-vw: math.unit($max-vw);
  $unit-min-value: math.unit($min-value);
  $unit-max-value: math.unit($max-value);

  // Ensure the viewport breakpoint units match
  @if $unit-min-vw != $unit-max-vw {
    @error "Viewport breakpoint units ($unit-min-vw, $unit-max-vw) must match!";
  }

  // Ensure value units are consistent
  @if $unit-min-value != $unit-max-value {
    @error "Property value units ($unit-min-value, $unit-max-value) must match!";
  }

  // Set the default (fallback) value for small screens
  & {
    #{$property}: $min-value;
  }

  // Set the fluid value between the breakpoints
  @media screen and (min-width: $min-vw) {
    #{$property}: calc(
      #{$min-value} +
        (
          #{strip-unit($max-value - $min-value)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        )
    );
  }

  // Set the maximum value explicitly for large screens
  @media screen and (min-width: $max-vw) {
    #{$property}: $max-value;
  }
}
