@use "sass:math";
@use "sass:map";

// Height of top nav bar
$navBarHeight: 46px;

// Base Variables (Unitless)
// TODO: Should these align better with Bootstrap's breakpoints?
$ss: 360; // Super small (smartphones?)
$xs: 480; // Extra small (smartphones)
$sm: 768; // Small (Tablets)
$md: 992; // Medium (Small laptops?)
$lg: 1200; // Large (standard? desktops)
$xl: 1400; // Extra large (large desktops)
$sl: 1600; // Super large (HUGE desktops)

// Derived Variables (With Units)
$sspx: $ss * 1px;
$xspx: $xs * 1px;
$smpx: $sm * 1px;
$mdpx: $md * 1px;
$lgpx: $lg * 1px;
$xlpx: $xl * 1px;
$slpx: $sl * 1px;

// Breakpoints definition
// Defines standard responsive breakpoints, including an additional 'xs' size (360px).
// These breakpoints are mobile-first, following Bootstrap conventions.
$breakpoints: (
  ss: $sspx,
  xs: $xspx,
  sm: $smpx,
  md: $mdpx,
  lg: $lgpx,
  xl: $xlpx,
  sl: $slpx,
);

// For thin stokes and normal weight text.
$heavierThemeColor: #719614;
// For heavy strokes and as a fill. (For contrast/readability)
$lighterThemeColor: #8db528;
$orange: #ff5e00;
$yellowOrange: #ffb600;
$red: #ff0000;

// Mixin for mobile-first media queries
// Usage: Apply styles starting from the specified breakpoint and up.
// Example:
// .example-class {
//   @include breakpoint-up(md) {
//     global.background-color: blue;
//   }
// }
@mixin breakpoint-up($breakpoint) {
  $min-width: map.get(
    $breakpoints,
    $breakpoint
  ); // Get the breakpoint's value from the map
  @if $min-width != null {
    @media (min-width: $min-width) {
      // Apply styles when the viewport meets the minimum width
      @content;
    }
  }
}

// Function to remove the unit from a CSS value
// This is useful for mathematical operations on CSS values
@function strip-unit($value) {
  // Divides the value by itself (multiplied by 0 plus 1) to effectively strip units
  @return math.div($value, $value * 0 + 1);
}

// Mixin to create a fluid property based on viewport width
// It interpolates between a minimum and maximum value as the viewport
// width scales between the two specified breakpoints
// Example:
// h1 {
//   @include global.fluid-property(height, global.$xs, global.$xl, 50px, 200px);
// }
@mixin fluid-property($property, $min-vw, $max-vw, $min-value, $max-value) {
  // Extract units to ensure consistency for calculations
  $unit-min-vw: math.unit($min-vw);
  $unit-max-vw: math.unit($max-vw);
  $unit-min-value: math.unit($min-value);
  $unit-max-value: math.unit($max-value);

  // Ensure the viewport breakpoint units match
  @if $unit-min-vw != $unit-max-vw {
    @error "Viewport breakpoint units ($unit-min-vw, $unit-max-vw) must match!";
  }

  // Ensure value units are consistent
  @if $unit-min-value != $unit-max-value {
    @error "Property value units ($unit-min-value, $unit-max-value) must match!";
  }

  // Set the default (fallback) value for small screens
  & {
    #{$property}: $min-value;
  }

  // Set the fluid value between the breakpoints
  @media screen and (min-width: $min-vw) {
    #{$property}: calc(
      #{$min-value} +
        (
          #{strip-unit($max-value - $min-value)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        )
    );
  }

  // Set the maximum value explicitly for large screens
  @media screen and (min-width: $max-vw) {
    #{$property}: $max-value;
  }
}
