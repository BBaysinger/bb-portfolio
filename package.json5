{
  // 📌 NOTE: This root package.json is ONLY for managing monorepo-level tooling and scripts.
  // It does not represent a real app or library, and should never be published to npm.
  // Root package name for the portfolio monorepo
  "name": "bb-portfolio-monorepo-root",
  // Prevents accidental publishing to npm registry
  "private": true,
  // Keep: Add the following lines (in package.json) to enable workspaces
  // Useful if you ever convert this monorepo into a Yarn/NPM workspace
  // "workspaces": [
  //   "frontend",
  //   "backend"
  // ],
  "scripts": {
    // 🔧 Run Prettier + build both Docker images (frontend & backend)
    // Use this as your "one command to prep everything" before deployment.
    "build:all": "npm run format && npm run docker:build:frontend && npm run docker:build:backend",
    // 🐳 Build backend Docker image
    // Tags the resulting image as `bb-backend` using Dockerfile inside ./backend
    "docker:build:backend": "docker build -t bb-backend ./backend",
    // 🐳 Build frontend Docker image
    // Tags the resulting image as `bb-frontend` using Dockerfile inside ./frontend
    "docker:build:frontend": "docker build -t bb-frontend ./frontend",
    // ▶️ Run backend Docker container locally
    // Maps to port 3000 and uses .env file for environment variables
    "docker:run:backend": "docker run -p 3000:3000 --env-file ./backend/.env bb-backend",
    // ▶️ Run frontend Docker container locally
    // Maps to port 3000 and uses .env file for environment variables
    "docker:run:frontend": "docker run -p 3000:3000 --env-file ./frontend/.env bb-frontend",
    // 🚀 Default dev command - runs both frontend and backend locally (without Docker)
    // Alias for dev:all to provide a simple "npm run dev" experience
    "dev": "npm run dev:all",
    // 🎯 Run both frontend and backend in same terminal with colored output
    // Uses concurrently to show logs from both services with blue/green prefixes
    // Great for seeing everything at once, but logs can get mixed
    "dev:all": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    // 📱 Run frontend and backend in separate macOS Terminal tabs
    // Uses AppleScript to spawn new Terminal tabs for clean, separated logs
    // Perfect for managing services independently (macOS only)
    "dev:tabs": "osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/backend\\\" && npm run dev\"' && osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/frontend\\\" && npm run dev\"'",
    // ⚙️ Run only the backend service locally (Payload CMS + API)
    // Connects to portfolio-local MongoDB database via .env.local
    "dev:backend": "cd backend && npm run dev",
    // 🎨 Run only the frontend service locally (Next.js with hot reload)
    // Serves the React frontend with automatic reloading on file changes
    "dev:frontend": "cd frontend && npm run dev",
    // 💅 Format all files with Prettier
    // Ensures consistent code style across the entire monorepo
    "format": "prettier --write .",
    // 🧼 Run ESLint on the full codebase
    // Great for catching JS/TS issues or team rule violations
    "lint": "eslint .",
    // 🎯 "Pretty Build" — formats code, then runs TypeScript project build for type-checking
    // Use this before commits to catch formatting or type errors early, because formatters
    // can sometimes introduce subtle breakages that TypeScript will catch
    "pb": "prettier --write . && tsc -b",
    // 🔄 Syncs package.json5 with package.json values while preserving comments and formatting
    // Run this after editing package.json to push updates back into the annotated JSON5 version
    "sync:json5": "tsx scripts/sync-json5.ts",
  },
  // Development-only dependencies for monorepo tooling and build processes
  "devDependencies": {
    // TypeScript definitions for glob package
    "@types/glob": "^9.0.0",
    // Run multiple commands simultaneously with colored output (used in dev:all script)
    // Enables running frontend and backend together in same terminal
    "concurrently": "^9.1.0",
    // JavaScript/TypeScript linting engine (v9 for latest rules)
    "eslint": "^9.35.0",
    // File pattern matching utility (used in build scripts)
    "glob": "^11.0.3",
    // Parser for .gitignore-style files (used in tooling)
    "ignore": "^7.0.5",
    // JSON parser with comment support (enables package.json5 syncing)
    "json5": "^2.2.3",
    // Opinionated code formatter for consistent style
    "prettier": "^3.6.2",
    // TypeScript execution engine for Node.js (legacy, kept for compatibility)
    "ts-node": "^10.9.2",
    // Fast TypeScript/ESM script runner (modern ts-node alternative)
    "tsx": "^4.20.5",
    // TypeScript compiler (v5.9 for latest language features)
    "typescript": "^5.9.2",
  },
}