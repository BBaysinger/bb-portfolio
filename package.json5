{
  // =====================
  // Root package.json5 for monorepo tooling only
  // =====================
  // 📌 NOTE: This root package.json is ONLY for managing monorepo-level tooling and scripts.
  // It does not represent a real app or library (and should not be published to npm).
  // Root package name for the portfolio monorepo
  // Monorepo root name (not a real app or package)
  "name": "bb-portfolio-monorepo-root",
  // Prevents accidental publishing to npm registry
  // Prevent publishing to npm registry
  "private": true,
  // Keep: Add the following lines (in package.json) to enable workspaces
  // Useful if you ever convert this monorepo into a Yarn/NPM workspace
  // "workspaces": [
  //   "frontend",
  //   "backend"
  // ],
  "scripts": {
    // =============================================================================
    // 🚀 DEVELOPMENT MODES OVERVIEW (for junior developers)
    // =============================================================================
    // 1. 🖥️  Bare Metal: Run directly on your machine (fastest, most direct)
    // 2. 🐳 Docker SSR: Containerized with hot reload (pages render on-demand)
    // 3. 🏗️  Docker SSG: Pre-builds pages like production (slower, but tests real build)
    // 4. 🌐 Caddy Proxy: Same as SSR but with production-like URLs (single port)
    //
    // Choose based on what you're testing:
    // - Daily dev: Use Bare Metal or Docker SSR
    // - Pre-commit: Use Docker SSG to test production builds
    // - URL testing: Use Caddy for production-like routing
    // =============================================================================
    // 🖥️ Build both backend and frontend locally without Docker (bare metal, laptop dev)
    "build:all": "npm run format && concurrently \"npm run build:backend\" \"npm run build:frontend\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    // 🖥️ Build backend service locally (bare metal, laptop dev)
    "build:backend": "cd backend && npm run build",
    // 🖥️ Build frontend service locally (bare metal, laptop dev)
    "build:frontend": "cd frontend && npm run build",
    // =============================================================================
    // 🐳 DOCKER DEVELOPMENT (Containerized - consistent across machines)
    // =============================================================================
    // 🐳 Build both frontend and backend Docker images using docker-compose local profile
    // Uses the local profile which includes development-optimized builds with hot reload
    "docker:build": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local docker compose build",
    // ⚡ DEVELOPMENT MODE (SSR): Start containers with hot reload for fast development
    // Frontend: http://localhost:8080, Backend: http://localhost:8081
    // Uses 'npm run dev' with volume mounts - pages render on-demand with fresh data from backend
    "docker:up": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local docker compose up --build",
    // ▶️ Same as docker:up but runs in background (doesn't block your terminal)
    // Use this if you want to continue using your terminal while containers run
    "docker:up:detached": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local docker compose up --build -d",
    // ⚡ Same as docker:up but with React Strict Mode disabled (helps with legacy libraries)
    // Useful when React's strict mode causes issues with third-party components
    "docker:up:no-strict": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local REACT_STRICT_MODE=false docker compose up --build",
    // ▶️ Same as docker:up:no-strict but runs in background (detached mode)
    "docker:up:no-strict:detached": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local REACT_STRICT_MODE=false docker compose up --build -d",
    // 🛑 Stop and remove all local development containers
    // Cleans up containers, networks, and anonymous volumes created by docker:up
    "docker:down": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local docker compose down",
    // 📋 Follow logs from both frontend and backend containers in real-time
    // Useful when running in detached mode to see what's happening
    "docker:logs": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local docker compose logs -f",
    // 🏗️ BUILD MODE: Build static site generation containers (local-ssg profile)
    "docker:ssg:build": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg docker compose build",
    // 🏗️ PRODUCTION MODE (SSG): Pre-builds all pages with data baked-in at build time
    // Frontend: Static HTML files generated, Backend: Hot reload for development
    // Slower startup but faster page loads - tests how production will behave
    "docker:ssg:up": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg docker compose up --build",
    // 🏗️ Same as docker:ssg:up but runs in background (detached mode)
    "docker:ssg:up:detached": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg docker compose up --build -d",
    // 🏗️ Same as docker:ssg:up but with React Strict Mode disabled (for compatibility)
    "docker:ssg:up:no-strict": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg REACT_STRICT_MODE=false docker compose up --build",
    // 🏗️ Same as docker:ssg:up:no-strict but runs in background (detached mode)
    "docker:ssg:up:no-strict:detached": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg REACT_STRICT_MODE=false docker compose up --build -d",
    // 🛑 Stop and remove static site generation containers (local-ssg profile)
    "docker:ssg:down": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg docker compose down",
    // 📋 Follow logs from static site generation containers in real-time (local-ssg profile)
    "docker:ssg:logs": "AWS_ACCOUNT_ID=123456789012 COMPOSE_PROFILES=local-ssg docker compose logs -f",
    // 🐳 Build backend Docker image for Docker Hub (dev tag)
    "docker:build:backend": "docker build -t bhbaysinger/portfolio-backend:dev ./backend",
    // 🐳 Build frontend Docker image for Docker Hub (dev tag)
    "docker:build:frontend": "docker build -t bhbaysinger/portfolio-frontend:dev ./frontend",
    // 🚀 Push backend Docker image to Docker Hub (dev tag)
    "docker:push:backend": "docker push bhbaysinger/portfolio-backend:dev",
    // 🚀 Push frontend Docker image to Docker Hub (dev tag)
    "docker:push:frontend": "docker push bhbaysinger/portfolio-frontend:dev",
    // 🚀 Build and push both backend and frontend Docker images to Docker Hub (dev tag)
    "docker:build-push": "npm run docker:build:backend && npm run docker:build:frontend && npm run docker:push:backend && npm run docker:push:frontend",
    // 🌐 PROXY MODE (SSR + URL consistency): Single port access like production
    // Access everything at http://localhost:8080 - routes /api/* to backend, /* to frontend
    // Uses development containers (hot reload) but with production-like URL structure
    "caddy:up": "docker compose -f docker-compose.caddy.yml up --build -d",
    // 🌐 Same as caddy:up but with React Strict Mode disabled (for legacy compatibility)
    "caddy:up:no-strict": "REACT_STRICT_MODE=false docker compose -f docker-compose.caddy.yml up --build -d",
    // 🛑 Stop Caddy reverse proxy containers
    "caddy:down": "docker compose -f docker-compose.caddy.yml down",
    // � Follow Caddy reverse proxy logs in real-time
    // 📋 Follow Caddy reverse proxy logs in real-time
    "caddy:logs": "docker compose -f docker-compose.caddy.yml logs -f",
    // 🔄 Restart Caddy reverse proxy (stop + start)
    "caddy:restart": "docker compose -f docker-compose.caddy.yml down && docker compose -f docker-compose.caddy.yml up --build -d",
    // ⚡ Reload Caddy configuration without restarting containers
    "caddy:reload": "docker exec portfolio-caddy-local caddy reload --config /etc/caddy/Caddyfile",
    // � Check status of portfolio containers
    // 📊 Check status of portfolio containers
    "caddy:status": "docker ps --filter name=portfolio- --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
    // =============================================================================
    // 🖥️  BARE METAL DEVELOPMENT (No Docker - runs directly on your machine)
    // =============================================================================
    // 🏁 Shortcut: Run both frontend and backend locally (bare metal dev)
    "bareMetalDev": "npm run bareMetalDev:all",
    // 🎯 Run both frontend and backend in same terminal with colored output
    // Uses concurrently to show logs from both services with blue/green prefixes
    // Great for seeing everything at once, but logs can get mixed
    "bareMetalDev:all": "concurrently \"npm run bareMetalDev:backend\" \"npm run bareMetalDev:frontend\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    // 📱 Run frontend and backend in separate macOS Terminal tabs
    // Uses AppleScript to spawn new Terminal tabs for clean, separated logs
    // Perfect for managing services independently (macOS only)
    "bareMetalDev:tabs": "osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/backend\\\" && npm run dev\"' && osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/frontend\\\" && npm run dev\"'",
    // ⚙️ Run only the backend service locally (Payload CMS + API)
    // Connects to portfolio-local MongoDB database via .env
    "bareMetalDev:backend": "cd backend && npm run dev",
    // 🎨 Run only the frontend service locally (Next.js with hot reload)
    // Serves the React frontend with automatic reloading on file changes
    "bareMetalDev:frontend": "cd frontend && npm run dev",
    // 💅 Format all files with Prettier
    // Ensures consistent code style across the entire monorepo
    "format": "prettier --write .",
    // 🧼 Run ESLint on the full codebase
    // Great for catching JS/TS issues or team rule violations
    "lint": "eslint .",
    // ✅ Fast pre-commit validation (format + lint + type check)
    // Run before every commit for quick validation (~5-10 seconds)
    // Auto-fixes ESLint issues when possible, continues with warnings
    "precommit": "prettier --write . && eslint . --fix && tsc --noEmit",
    // 🛡️ Comprehensive pre-push validation (precommit + tests)
    // Run before pushing to ensure everything works (1-5 minutes)
    // Includes all precommit checks plus full test suite
    "prepush": "npm run precommit && npm test",
    // 🔄 Syncs package.json5 with package.json values while preserving comments and formatting
    // Run this after editing package.json to push updates back into the annotated JSON5 version
    "sync:json5": "tsx scripts/sync-json5.ts",
    // 🔐 Preview GitHub Secrets from .github-secrets.private.json5 to your repo
    "sync:secrets:dry": "tsx scripts/sync-github-secrets.ts BBaysinger/bb-portfolio ./.github-secrets.private.json5 --dry-run",
    // 🔐 Sync GitHub Secrets from .github-secrets.private.json5 to your repo
    "sync:secrets": "tsx scripts/sync-github-secrets.ts BBaysinger/bb-portfolio ./.github-secrets.private.json5",
    // 📦 Update dependencies to latest versions across all packages
    // Runs npm-check-updates in root, backend, and frontend simultaneously
    // Review changes before running npm run install:all
    "update:deps": "concurrently \"ncu -u\" \"cd backend && ncu -u\" \"cd frontend && ncu -u\" --names \"root,backend,frontend\" --prefix-colors \"yellow,blue,green\"",
    // 🔽 Install dependencies in all packages after updating
    // Run after update:deps to install the newly updated dependencies
    // Handles root, backend, and frontend package installations simultaneously
    "install:all": "concurrently \"npm install\" \"cd backend && npm install\" \"cd frontend && npm install\" --names \"root,backend,frontend\" --prefix-colors \"yellow,blue,green\"",
    // 🪄 Generate the portfolio images from PSDs from *outside* of the repo. Run before seed:media.
    "media:export": "bash scripts/export-media.sh",
    // 🪄 Import images from ../cms-seedings into backend/media/* for local dev
    "seed:media": "tsx scripts/import-media-from-seedings.ts",
    // 🪄 Upload local media files to S3 for production use
    "media:upload": "tsx scripts/upload-media-to-s3.ts",
    // 🪄 Verify uploaded media files on S3 to ensure integrity
    "media:verify": "tsx scripts/verify-media-s3.ts",
    // 📤 Upload local media files to S3 development environment
    "migrate:media:dev": "tsx scripts/upload-media-to-s3.ts --env dev",
    // 📤 Upload local media files to S3 production environment
    "migrate:media:prod": "tsx scripts/upload-media-to-s3.ts --env prod",
    // 🔗 PREVIEW: Update media URLs in development database to point to S3 (dry run)
    "migrate:db:dev:dry": "cd backend && tsx scripts/update-media-urls.ts --env dev --dry-run",
    // 🔗 Update media URLs in development database to point to S3
    "migrate:db:dev": "cd backend && tsx scripts/update-media-urls.ts --env dev",
    // 🔗 PREVIEW: Update media URLs in production database to point to S3 (dry run)
    "migrate:db:prod:dry": "cd backend && tsx scripts/update-media-urls.ts --env prod --dry-run",
    // 🔗 Update media URLs in production database to point to S3
    "migrate:db:prod": "cd backend && tsx scripts/update-media-urls.ts --env prod",
    // 📦 PREVIEW: Complete media migration to development (upload + URL sync, dry run)
    "migrate:all:dev:dry": "npm run migrate:media:dev && npm run migrate:db:dev:dry",
    // 📦 Complete media migration to development environment (upload + URL sync)
    "migrate:all:dev": "npm run migrate:media:dev && npm run migrate:db:dev",
    // 📦 PREVIEW: Complete media migration to production (upload + URL sync, dry run)
    "migrate:all:prod:dry": "npm run migrate:media:prod && npm run migrate:db:prod:dry",
    // 📦 Complete media migration to production environment (upload + URL sync)
    "migrate:all:prod": "npm run migrate:media:prod && npm run migrate:db:prod",
    // ☢️💀 DANGER: NUCLEAR DATABASE REPLACEMENT - Completely overwrites production DB with local data
    "db:migrate:local-to-prod": "bash scripts/migrate-database.sh local prod",
    // ☢️🔥 DANGER: APOCALYPTIC DB REPLACEMENT - Completely overwrites dev DB with local data
    "db:migrate:local-to-dev": "bash scripts/migrate-database.sh local dev",
    // ☢️⚰️ DANGER: ARMAGEDDON DB REPLACEMENT - Completely overwrites dev DB with production data
    "db:migrate:prod-to-dev": "bash scripts/migrate-database.sh prod dev",
  },
  "devDependencies": {
    // Next.js-specific ESLint rules for best practices
    "@next/eslint-plugin-next": "^15.5.4",
    // TypeScript type definitions for glob
    "@types/glob": "^9.0.0",
    // ESLint plugin for TypeScript-specific linting rules
    "@typescript-eslint/eslint-plugin": "^8.46.0",
    // TypeScript parser for ESLint
    "@typescript-eslint/parser": "^8.46.0",
    // Run multiple commands concurrently in scripts
    "concurrently": "^9.2.1",
    // Main linter for JS/TS code
    "eslint": "^9.37.0",
    // ESLint plugin for import/export syntax validation
    "eslint-plugin-import": "^2.32.0",
    // ESLint plugin for React hooks rules
    "eslint-plugin-react-hooks": "^6.1.1",
    // ESLint plugin for React Fast Refresh support
    "eslint-plugin-react-refresh": "^0.4.23",
    // File pattern matching utility
    "glob": "^11.0.3",
    // List of global variables for linting
    "globals": "^16.4.0",
    // Utility for .gitignore-style file filtering
    "ignore": "^7.0.5",
    // Runtime for dynamic JS/TS imports
    "jiti": "^2.6.1",
    // JSON5 parser for annotated config files
    "json5": "^2.2.3",
    // Code formatter for consistent style
    "prettier": "^3.6.2",
    // TypeScript execution environment for scripts
    "ts-node": "^10.9.2",
    // TypeScript/ESM runner for scripts
    "tsx": "^4.20.6",
    // TypeScript language support
    "typescript": "^5.9.3",
  },
}