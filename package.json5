{
  // =====================
  // Root package.json5 for monorepo tooling only
  // =====================
  // üìå NOTE: This root package.json is ONLY for managing monorepo-level tooling and scripts.
  // It does not represent a real app or library, and should never be published to npm.
  // Root package name for the portfolio monorepo
  // Monorepo root name (not a real app or package)
  "name": "bb-portfolio-monorepo-root",
  // Prevents accidental publishing to npm registry
  // Prevent publishing to npm registry
  "private": true,
  // Keep: Add the following lines (in package.json) to enable workspaces
  // Useful if you ever convert this monorepo into a Yarn/NPM workspace
  // "workspaces": [
  //   "frontend",
  //   "backend"
  // ],
  "scripts": {
    // üñ•Ô∏è Build both backend and frontend locally without Docker (bare metal, laptop dev)
    "build:all": "npm run format && concurrently \"npm run build:backend\" \"npm run build:frontend\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    // üñ•Ô∏è Build backend service locally (bare metal, laptop dev)
    "build:backend": "cd backend && npm run build",
    // üñ•Ô∏è Build frontend service locally (bare metal, laptop dev)
    "build:frontend": "cd frontend && npm run build",
    // üê≥ Build both frontend and backend Docker images using docker-compose local profile
    // Uses the local profile which includes development-optimized builds with hot reload
    "docker:build": "COMPOSE_PROFILES=local docker compose build",
    // ‚ñ∂Ô∏è Start both frontend and backend containers with docker-compose (with build)
    // Frontend runs on http://localhost:5051, Backend on http://localhost:5050
    // Includes volume mounts for hot reload and file watching
    "docker:up": "COMPOSE_PROFILES=local docker compose up --build",
    // ‚ñ∂Ô∏è Start containers in detached mode (runs in background)
    // Same as docker:up but doesn't block the terminal - runs containers in background
    "docker:up:detached": "COMPOSE_PROFILES=local docker compose up --build -d",
    // üõë Stop and remove all local development containers
    // Cleans up containers, networks, and anonymous volumes created by docker:up
    "docker:down": "COMPOSE_PROFILES=local docker compose down",
    // üìã Follow logs from both frontend and backend containers in real-time
    // Useful when running in detached mode to see what's happening
    "docker:logs": "COMPOSE_PROFILES=local docker compose logs -f",
    "docker:ssg:build": "COMPOSE_PROFILES=local-ssg docker compose build",
    // ‚ö†Ô∏è Do NOT mount node_modules volume for SSG/production builds! The container must use node_modules from the image, not a blank or host volume, or dependencies will be missing.
    "docker:ssg:up": "COMPOSE_PROFILES=local-ssg docker compose up --build",
    // ‚ö†Ô∏è Do NOT mount node_modules volume for SSG/production builds! The container must use node_modules from the image, not a blank or host volume, or dependencies will be missing.
    "docker:ssg:up:detached": "COMPOSE_PROFILES=local-ssg docker compose up --build -d",
    "docker:ssg:down": "COMPOSE_PROFILES=local-ssg docker compose down",
    "docker:ssg:logs": "COMPOSE_PROFILES=local-ssg docker compose logs -f",
    // üê≥ Build backend Docker image for Docker Hub (dev tag)
    "docker:build:backend": "docker build -t bhbaysinger/portfolio-backend:dev ./backend",
    // üê≥ Build frontend Docker image for Docker Hub (dev tag)
    "docker:build:frontend": "docker build -t bhbaysinger/portfolio-frontend:dev ./frontend",
    // üöÄ Push backend Docker image to Docker Hub (dev tag)
    "docker:push:backend": "docker push bhbaysinger/portfolio-backend:dev",
    // üöÄ Push frontend Docker image to Docker Hub (dev tag)
    "docker:push:frontend": "docker push bhbaysinger/portfolio-frontend:dev",
    // üèÅ Shortcut: Run both frontend and backend locally (bare metal dev)
    "baremetalDev": "npm run baremetalDev:all",
    // üéØ Run both frontend and backend in same terminal with colored output
    // Uses concurrently to show logs from both services with blue/green prefixes
    // Great for seeing everything at once, but logs can get mixed
    "baremetalDev:all": "concurrently \"npm run baremetalDev:backend\" \"npm run baremetalDev:frontend\" --names \"backend,frontend\" --prefix-colors \"blue,green\"",
    // üì± Run frontend and backend in separate macOS Terminal tabs
    // Uses AppleScript to spawn new Terminal tabs for clean, separated logs
    // Perfect for managing services independently (macOS only)
    "baremetalDev:tabs": "osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/backend\\\" && npm run dev\"' && osascript -e 'tell application \"Terminal\" to do script \"cd \\\"$(pwd)/frontend\\\" && npm run dev\"'",
    // ‚öôÔ∏è Run only the backend service locally (Payload CMS + API)
    // Connects to portfolio-local MongoDB database via .env
    "baremetalDev:backend": "cd backend && npm run dev",
    // üé® Run only the frontend service locally (Next.js with hot reload)
    // Serves the React frontend with automatic reloading on file changes
    "baremetalDev:frontend": "cd frontend && npm run dev",
    // üíÖ Format all files with Prettier
    // Ensures consistent code style across the entire monorepo
    "format": "prettier --write .",
    // üßº Run ESLint on the full codebase
    // Great for catching JS/TS issues or team rule violations
    "lint": "eslint .",
    // ‚úÖ Fast pre-commit validation (format + lint + type check)
    // Run before every commit for quick validation (~5-10 seconds)
    // Auto-fixes ESLint issues when possible, continues with warnings
    "precommit": "prettier --write . && eslint . --fix && tsc --noEmit",
    // üõ°Ô∏è Comprehensive pre-push validation (precommit + tests)
    // Run before pushing to ensure everything works (1-5 minutes)
    // Includes all precommit checks plus full test suite
    "prepush": "npm run precommit && npm test",
    // üîÑ Syncs package.json5 with package.json values while preserving comments and formatting
    // Run this after editing package.json to push updates back into the annotated JSON5 version
    "sync:json5": "tsx scripts/sync-json5.ts",
    // üì¶ Update dependencies to latest versions across all packages
    // Runs npm-check-updates in root, backend, and frontend simultaneously
    // Review changes before running npm run install:all
    "update:deps": "concurrently \"ncu -u\" \"cd backend && ncu -u\" \"cd frontend && ncu -u\" --names \"root,backend,frontend\" --prefix-colors \"yellow,blue,green\"",
    // üîΩ Install dependencies in all packages after updating
    // Run after update:deps to install the newly updated dependencies
    // Handles root, backend, and frontend package installations simultaneously
    "install:all": "concurrently \"npm install\" \"cd backend && npm install\" \"cd frontend && npm install\" --names \"root,backend,frontend\" --prefix-colors \"yellow,blue,green\"",
  },
  "devDependencies": {
    // ESLint plugin for Next.js specific rules and optimizations
    "@next/eslint-plugin-next": "^15.5.4",
    // TypeScript definitions for glob package
    "@types/glob": "^9.0.0",
    // TypeScript ESLint plugin for TS-specific linting rules
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    // TypeScript parser for ESLint to understand TS syntax
    "@typescript-eslint/parser": "^8.44.1",
    "concurrently": "^9.2.1",
    "eslint": "^9.36.0",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.21",
    "glob": "^11.0.3",
    "globals": "^16.4.0",
    "ignore": "^7.0.5",
    "jiti": "^2.6.0",
    "json5": "^2.2.3",
    "prettier": "^3.6.2",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.5",
    "typescript": "^5.9.2",
  },
}