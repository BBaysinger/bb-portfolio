# =============================================================================
# CI/CD Pipeline - BB Portfolio Site
# ===============================================================
# ENVIRONMENT FILES (.env.dev, .env.prod)
# ===============================================================
# These files are NOT sourced from the repo during deployment.
# They are dynamically generated on EC2 by the CI/CD workflow,
# with contents exclusively pulled from GitHub Actions secrets and variables.
# Local development uses .env only.
# ===============================================================
# =============================================================================
#
# This workflow provides automated build, test, and deployment for the
# portfolio application with support for multiple environments:
#
# TRIGGERS:
# - Push to 'main' branch: Full CI/CD with production deployment
# - Push to 'dev' branch: CI/CD with development environment rebuild
# - Manual dispatch: Allows manual triggering for any branch
#
# JOBS:
# 1. build-and-test: Validates code quality and builds both frontend/backend
# 2. deploy-prod: Deploys to AWS EC2 production (main branch only)
# 3. rebuild-dev: Rebuilds development environment (dev branch or manual)
#
# DEPLOYMENT TARGETS:
# - Production: Uses pre-built ECR images for fast, reliable deployments
# - Development: Builds directly on EC2 for flexibility and testing
# =============================================================================

name: CI/CD Pipeline

# Workflow triggers
on:
  push:
    branches:
      - main # Production deployments
      - dev # Development environment rebuilds
  workflow_dispatch: # Manual trigger for any branch

jobs:
  # ==========================================================================
  # BUILD AND TEST JOB
  # ==========================================================================
  # Validates code quality, runs tests, and ensures both frontend and backend
  # can be built successfully before any deployment occurs
  # ==========================================================================
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # LTS version for stability

      # =======================================================================
      # BACKEND BUILD AND TEST (Build backend first for frontend SSG)
      # =======================================================================
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps # Required for some peer dependency conflicts

      - name: Build backend
        working-directory: ./backend
        env:
          # Use dev profile with a dummy connection string just to satisfy build-time checks
          ENV_PROFILE: dev
          DEV_MONGODB_URI: mongodb://localhost:27017/dummy-db
          # Required by strict env checks in payload.config.ts for dev profile
          DEV_PAYLOAD_SECRET: ${{ secrets.DEV_PAYLOAD_SECRET }}
          # Frontend origin for CORS/CSRF checks during build-time config resolution
          DEV_FRONTEND_URL: ${{ secrets.DEV_FRONTEND_URL }}
          # S3 and AWS configuration required by payload.config.ts during build
          DEV_S3_BUCKET: ${{ secrets.DEV_S3_BUCKET }}
          DEV_AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          # Unified AWS credentials for all services (S3, SES, deployment)
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEV_SES_FROM_EMAIL: ${{ secrets.DEV_SES_FROM_EMAIL }}
          DEV_SES_TO_EMAIL: ${{ secrets.DEV_SES_TO_EMAIL }}
        run: npm run build # Next.js production build (Payload CMS)

      - name: Test backend
        working-directory: ./backend
        env:
          ENV_PROFILE: dev
          DEV_MONGODB_URI: mongodb://localhost:27017/dummy-db
          DEV_PAYLOAD_SECRET: ${{ secrets.DEV_PAYLOAD_SECRET }}
          DEV_FRONTEND_URL: ${{ secrets.DEV_FRONTEND_URL }}
          # S3 and AWS configuration required by payload.config.ts during testing
          DEV_S3_BUCKET: ${{ secrets.DEV_S3_BUCKET }}
          DEV_AWS_REGION: ${{ secrets.DEV_AWS_REGION }}
          # Unified AWS credentials for all services (S3, SES, deployment)
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEV_SES_FROM_EMAIL: ${{ secrets.DEV_SES_FROM_EMAIL }}
          DEV_SES_TO_EMAIL: ${{ secrets.DEV_SES_TO_EMAIL }}
        run: npm test || echo "⚠️ No backend tests yet" # Graceful failure until tests are implemented

      # =======================================================================
      # FRONTEND BUILD AND TEST (After backend is ready)
      # =======================================================================
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps # Required for some peer dependency conflicts

      - name: Build frontend
        working-directory: ./frontend
        env:
          ENV_PROFILE: dev
          DEV_BACKEND_INTERNAL_URL: ${{ secrets.DEV_BACKEND_INTERNAL_URL }}
          DEV_NEXT_PUBLIC_BACKEND_URL: ${{ secrets.DEV_NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_BACKEND_URL: ${{ secrets.DEV_NEXT_PUBLIC_BACKEND_URL }}
        run: npm run build

  # Build and push production images to ECR (main branch)
  build-push-prod-images:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push frontend-prod to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bb-portfolio-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache --target runner \
            --build-arg ENV_PROFILE=prod \
            --build-arg PROD_BACKEND_INTERNAL_URL="${{ secrets.PROD_BACKEND_INTERNAL_URL }}" \
            --build-arg PROD_NEXT_PUBLIC_BACKEND_URL="${{ secrets.PROD_NEXT_PUBLIC_BACKEND_URL }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Build and push backend-prod to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bb-portfolio-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.PROD_MONGODB_URI }}" > /tmp/prod_mongodb_uri
          echo "${{ secrets.DEV_MONGODB_URI }}" > /tmp/dev_mongodb_uri
          echo "${{ secrets.LOCAL_MONGODB_URI }}" > /tmp/local_mongodb_uri
          echo "${{ secrets.PROD_PAYLOAD_SECRET }}" > /tmp/prod_payload_secret
          echo "${{ secrets.AWS_ACCESS_KEY_ID }}" > /tmp/aws_access_key_id
          echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > /tmp/aws_secret_access_key
          echo "${{ secrets.PROD_SES_FROM_EMAIL }}" > /tmp/prod_ses_from_email
          echo "${{ secrets.PROD_SES_TO_EMAIL }}" > /tmp/prod_ses_to_email
          DOCKER_BUILDKIT=1 docker build --no-cache --target runtime \
            --build-arg ENV_PROFILE=prod \
            --build-arg PROD_FRONTEND_URL="${{ secrets.PROD_FRONTEND_URL }}" \
            --build-arg PROD_S3_BUCKET="${{ secrets.PROD_S3_BUCKET }}" \
            --build-arg PROD_AWS_REGION="${{ secrets.PROD_AWS_REGION }}" \
            --build-arg DEV_AWS_REGION="${{ secrets.DEV_AWS_REGION }}" \
            --secret id=prod_mongodb_uri,src=/tmp/prod_mongodb_uri \
            --secret id=dev_mongodb_uri,src=/tmp/dev_mongodb_uri \
            --secret id=local_mongodb_uri,src=/tmp/local_mongodb_uri \
            --secret id=prod_payload_secret,src=/tmp/prod_payload_secret \
            --secret id=aws_access_key_id,src=/tmp/aws_access_key_id \
            --secret id=aws_secret_access_key,src=/tmp/aws_secret_access_key \
            --secret id=prod_ses_from_email,src=/tmp/prod_ses_from_email \
            --secret id=prod_ses_to_email,src=/tmp/prod_ses_to_email \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          rm -f /tmp/prod_mongodb_uri /tmp/dev_mongodb_uri /tmp/local_mongodb_uri /tmp/prod_payload_secret /tmp/aws_access_key_id /tmp/aws_secret_access_key /tmp/prod_ses_from_email /tmp/prod_ses_to_email
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Deploy to EC2 via reusable workflow (prod)
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test, build-push-prod-images]
    uses: ./.github/workflows/redeploy.yml
    secrets: inherit
    with:
      environment: prod
      start_dev: false
      refresh_env: false
      restart_containers: true

  # Build and push dev images to Docker Hub (dev branch or manual)
  build-push-dev-images:
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push dev images to Docker Hub
        run: |
          docker build --build-arg ENV_PROFILE=dev \
            -t bhbaysinger/portfolio-backend:dev ./backend
          docker build --build-arg ENV_PROFILE=dev \
            --build-arg DEV_BACKEND_INTERNAL_URL=${{ secrets.DEV_BACKEND_INTERNAL_URL }} \
            --build-arg DEV_NEXT_PUBLIC_BACKEND_URL=${{ secrets.DEV_NEXT_PUBLIC_BACKEND_URL }} \
            -t bhbaysinger/portfolio-frontend:dev ./frontend
          docker push bhbaysinger/portfolio-backend:dev
          docker push bhbaysinger/portfolio-frontend:dev

  # Deploy dev via reusable workflow
  deploy-dev:
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    needs: build-push-dev-images
    uses: ./.github/workflows/redeploy.yml
    secrets: inherit
    with:
      environment: dev
      start_dev: true
      refresh_env: true # Always regenerate .env files on dev for convenience while iterating
      restart_containers: true

