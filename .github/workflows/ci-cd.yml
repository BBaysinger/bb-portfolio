# =============================================================================
# CI/CD Pipeline - BB Portfolio Site (IMPROVED)
# =============================================================================
#
# This improved workflow uses AWS Session Manager instead of SSH for better
# security and reliability. It eliminates SSH key management issues.
#
# TRIGGERS:
# - Push to 'main' branch: Full CI/CD with production deployment
# - Push to 'dev' branch: CI/CD with development environment rebuild
# - Manual dispatch: Allows manual triggering for any branch
#
# IMPROVEMENTS:
# - Uses AWS Session Manager instead of SSH
# - Better error handling and logging
# - Simplified authentication
# - More reliable deployment process
# =============================================================================

name: CI/CD Pipeline (Improved)

# Workflow triggers
on:
  push:
    branches:
      - main # Production deployments
      - dev # Development environment rebuilds
  workflow_dispatch: # Manual trigger for any branch

jobs:
  # ==========================================================================
  # BUILD AND TEST JOB
  # ==========================================================================
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Frontend build and test
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test frontend
        working-directory: ./frontend
        run: npm test || echo "⚠️ No frontend tests yet"

      # Backend build and test
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Test backend
        working-directory: ./backend
        run: npm test || echo "⚠️ No backend tests yet"

  # ==========================================================================
  # PRODUCTION DEPLOYMENT JOB (Using Session Manager)
  # ==========================================================================
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        run: |
          echo "🔐 Authenticating with Amazon ECR..."
          aws ecr get-login-password --region us-west-2 \
            | docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com

      - name: Build and push frontend-prod
        run: |
          echo "Building frontend production image..."
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest

      - name: Build and push backend-prod
        run: |
          echo "Building backend production image..."
          docker build -t backend:latest ./backend
          docker tag backend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest

      # Deploy using AWS Session Manager instead of SSH
      - name: Deploy prod on EC2 (Session Manager)
        run: |
          echo "🚀 Starting production deployment via Session Manager..."
          
          # Create deployment script
          cat > deploy-prod.sh << 'DEPLOY_EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting production deployment at $(date)"
          echo "📍 Deploying to: $(hostname)"
          
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            # Install Docker Compose if not present
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
              echo "Docker Compose installed"
            fi
            
            # Ensure Docker is running
            sudo systemctl start docker
            sleep 5          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            sudo yum install -y awscli
          fi
          
            # Setup repository
            cd $(echo ~)
            if [ ! -d "portfolio" ]; then
              echo "📥 Cloning repository..."
              git clone https://github.com/BBaysinger/bb-portfolio.git portfolio
            else
              echo "🔄 Updating existing repository..."
              cd portfolio
              git fetch origin
              git checkout main
              git reset --hard origin/main
              cd ..
            fi
            
            cd $(echo ~)/portfolio          # Create production environment files
          cat > backend/.env.prod << ENV_EOF
          PORT=3000
          DATABASE_URI=$DATABASE_URI
          PAYLOAD_SECRET=$PAYLOAD_SECRET
          NODE_ENV=production
          ENV_EOF
          
          cat > frontend/.env.prod << ENV_EOF
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://35.161.23.114:4000
          ENV_EOF
          
          # ECR login
          aws ecr get-login-password --region us-west-2 | sudo docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com
          
          # Deploy production containers
          COMPOSE_PROFILES=prod docker compose pull || echo "⚠️ Failed to pull images"
          COMPOSE_PROFILES=prod docker compose up -d
          
          # Health check
          sleep 20
          docker ps
          
          echo "Production deployment complete at $(date)!"
          DEPLOY_EOF
          
          # Execute deployment script via Session Manager
          aws ssm send-command \
            --instance-ids "i-05b77fe5e091dad62" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"
              export DATABASE_URI='${{ secrets.PROD_DATABASE_URI }}'
              export PAYLOAD_SECRET='${{ secrets.PROD_PAYLOAD_SECRET }}'
              aws configure set aws_access_key_id '${{ secrets.AWS_ACCESS_KEY_ID }}'
              aws configure set aws_secret_access_key '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
              aws configure set default.region us-west-2
              bash -s
            \"]" \
            --region us-west-2 \
            --output text \
            --query 'Command.CommandId' > command_id.txt
          
          # Wait for command to complete and get output
          COMMAND_ID=$(cat command_id.txt)
          echo "Command ID: $COMMAND_ID"
          
          # Wait for completion (max 10 minutes)
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "i-05b77fe5e091dad62" \
              --region us-west-2 \
              --query 'Status' --output text 2>/dev/null || echo "InProgress")
            
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-05b77fe5e091dad62" \
                --region us-west-2 \
                --query 'StandardOutputContent' \
                --output text
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Deployment failed!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-05b77fe5e091dad62" \
                --region us-west-2 \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
            
            sleep 10
          done
          
          # Pass deployment script content via stdin
          cat deploy-prod.sh | aws ssm send-command \
            --instance-ids "i-05b77fe5e091dad62" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"cat > /tmp/deploy.sh && chmod +x /tmp/deploy.sh && DATABASE_URI='${{ secrets.PROD_DATABASE_URI }}' PAYLOAD_SECRET='${{ secrets.PROD_PAYLOAD_SECRET }}' /tmp/deploy.sh\"]" \
            --region us-west-2

  # ==========================================================================
  # DEVELOPMENT REBUILD JOB (Using Session Manager)
  # ==========================================================================
  rebuild-dev:
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Rebuild dev on EC2 (Session Manager)
        run: |
          echo "🔄 Starting development environment rebuild..."
          
          # Execute development rebuild via Session Manager
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "i-02ac398ee126a3366" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -e",
              "echo \"🔄 Development rebuild started at $(date)\"",
              "echo \"Current user: $(whoami)\"",
              "echo \"Current directory: $(pwd)\"",
              "echo \"Home directory: $(echo ~)\"",
              "cd $(echo ~)",
              "if [ ! -d \"portfolio\" ]; then",
              "  echo \"📥 Cloning repository...\"",
              "  git clone https://github.com/BBaysinger/bb-portfolio.git portfolio",
              "else",
              "  echo \"🔄 Updating repository...\"",
              "  cd portfolio",
              "  git fetch origin",
              "  git checkout dev",
              "  git reset --hard origin/dev",
              "  cd ..",
              "fi",
              "if ! command -v docker &> /dev/null; then",
              "  echo \"Installing Docker...\"",
              "  sudo yum update -y",
              "  sudo yum install -y docker git",
              "  sudo systemctl start docker",
              "  sudo systemctl enable docker",
              "  sudo usermod -a -G docker ec2-user",
              "fi",
              "if ! docker compose version &> /dev/null; then",
              "  echo \"Installing Docker Compose...\"",
              "  sudo mkdir -p /usr/local/lib/docker/cli-plugins",
              "  sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/lib/docker/cli-plugins/docker-compose",
              "  sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose",
              "  echo \"Docker Compose installed\"",
              "fi",
              "sudo systemctl start docker",
              "sleep 5",
              "cd $(echo ~)/portfolio",
              "echo \"Creating development environment files...\"",
              "cat > backend/.env.dev << EOF",
              "PORT=3000",
              "DATABASE_URI='${{ secrets.DATABASE_URI }}'",
              "PAYLOAD_SECRET='${{ secrets.PAYLOAD_SECRET }}'",
              "NODE_ENV=development",
              "EOF",
              "cat > frontend/.env.dev << EOF",
              "NODE_ENV=development",
              "NEXT_PUBLIC_API_URL=http://localhost:4000",
              "EOF",
              "echo \"Building and starting development containers...\"",
              "COMPOSE_PROFILES=dev docker compose up -d --build",
              "echo \"Development rebuild complete!\"",
              "docker ps"
            ]' \
            --region us-west-2 \
            --output text \
            --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          
          # Wait for completion
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "i-02ac398ee126a3366" \
              --region us-west-2 \
              --query 'Status' --output text 2>/dev/null || echo "InProgress")
            
            echo "Rebuild status: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Development rebuild completed successfully!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-02ac398ee126a3366" \
                --region us-west-2 \
                --query 'StandardOutputContent' \
                --output text
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Development rebuild failed!"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "i-02ac398ee126a3366" \
                --region us-west-2 \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
            
            sleep 10
          done