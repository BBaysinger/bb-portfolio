name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch: # allows manual trigger for dev rebuild

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---- FRONTEND ----
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test frontend
        working-directory: ./frontend
        run: npm test || echo "⚠️ No frontend tests yet"

      # ---- BACKEND ----
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Test backend
        working-directory: ./backend
        run: npm test || echo "⚠️ No backend tests yet"

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-west-2 \
            | docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com

      - name: Build and push frontend-prod
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest

      - name: Build and push backend-prod
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest

      - name: Deploy prod on EC2
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 15 # Increased timeout for health checks
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 12m # Increased SSH action timeout
          script: |
            echo "=== Starting deployment at $(date) ==="

            # Install docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              echo "Starting Docker service..."
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
              echo "Docker installation complete"
            else
              echo "Docker already installed"
            fi

            # Install AWS CLI if not present
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo yum install -y awscli
              echo "AWS CLI installation complete"
            else
              echo "AWS CLI already installed"
            fi

            # Install docker compose plugin if not present
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
              echo "Docker Compose installation complete"
            else
              echo "Docker Compose already installed"
            fi

            # Ensure docker service is running
            sudo systemctl daemon-reload
            sudo systemctl start docker
            sudo systemctl enable docker

            # Wait for docker to be ready
            sleep 5

            # Verify docker is working
            sudo docker --version

            # Configure AWS credentials (use the same ones from the workflow)
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region us-west-2

            # Login to ECR
            aws ecr get-login-password --region us-west-2 | sudo docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com

            # Also login as regular user for docker compose
            aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com

            # Install git if not present
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo yum install -y git
            fi

            # Clone or update the repository
            echo "Setting up project repository..."
            cd $HOME
            if [ ! -d "portfolio" ]; then
              echo "Cloning repository..."
              git clone https://github.com/BBaysinger/bb-portfolio.git portfolio
            else
              echo "Updating existing repository..."
              cd portfolio
              git fetch origin
              git checkout main
              git reset --hard origin/main
              cd ..
            fi

            # Create production environment files
            cd ~/portfolio

            # Create backend .env.prod
            cat > backend/.env.prod << EOF
            PORT=3000
            DATABASE_URI=${{ secrets.PROD_DATABASE_URI }}
            PAYLOAD_SECRET=${{ secrets.PROD_PAYLOAD_SECRET }}
            NODE_ENV=production
            EOF

            # Create frontend .env.prod (add variables as needed)
            cat > frontend/.env.prod << EOF
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=http://your-ec2-ip:4000
            EOF

            echo "=== Pulling latest images ==="
            COMPOSE_PROFILES=prod docker compose pull || {
              echo "Failed to pull images. Continuing with existing images..."
            }

            # Test that SSH connection is working
            echo "=== SSH Connection Test ==="
            echo "Connected successfully to $(hostname) at $(date)"
            echo "Current user: $(whoami)"
            echo "Working directory: $(pwd)"
            echo "Disk space:"
            df -h | head -5
            echo "Memory:"
            free -h

            echo "=== Starting production deployment ==="
            COMPOSE_PROFILES=prod docker compose up -d

            # Wait a moment for containers to start
            echo "Waiting for containers to initialize..."
            sleep 20

            # Check container logs
            echo "=== Backend Container Logs ==="
            docker logs portfolio-backend-prod --tail 50 || echo "Backend container not found"

            echo "=== Frontend Container Logs ==="
            docker logs portfolio-frontend-prod --tail 50 || echo "Frontend container not found"

            # Quick status check
            echo "=== Deployment Status ==="
            docker ps
            COMPOSE_PROFILES=prod docker compose ps

            echo "=== Production deployment complete! ==="

  rebuild-dev:
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Rebuild dev on EC2
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 10 # Increased timeout for installations
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 8m # Increased SSH action timeout
          script: |
            # Install git if not present
            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo yum install -y git
            fi

            # Clone or update the repository
            cd $HOME
            if [ ! -d "portfolio" ]; then
              git clone https://github.com/BBaysinger/bb-portfolio.git portfolio
            else
              cd portfolio
              git fetch origin
              git checkout dev
              git reset --hard origin/dev
              cd ..
            fi

            # Install docker if not present
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi

            # Install docker compose plugin if not present
            if ! docker compose version &> /dev/null; then
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi

            # Ensure docker service is running
            sudo systemctl daemon-reload
            sudo systemctl start docker
            sudo systemctl enable docker

            # Wait for docker to be ready
            sleep 5

            # Verify docker is working
            sudo docker --version

            # Create dev environment files from secrets
            cd $HOME/portfolio

            # Create backend .env.dev
            cat > backend/.env.dev << EOF
            PORT=3000
            DATABASE_URI=${{ secrets.DEV_DATABASE_URI }}
            PAYLOAD_SECRET=${{ secrets.DEV_PAYLOAD_SECRET }}
            NODE_ENV=development
            EOF

            # Create frontend .env.dev (add variables as needed)
            cat > frontend/.env.dev << EOF
            NODE_ENV=development
            NEXT_PUBLIC_API_URL=http://localhost:4000
            EOF

            # Deploy with docker compose
            COMPOSE_PROFILES=dev docker compose up -d --build
