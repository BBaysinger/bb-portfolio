name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev  # Enable automatic dev rebuilds
  workflow_dispatch: # allows manual trigger for dev rebuild

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ---- FRONTEND ----
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test frontend
        working-directory: ./frontend
        run: npm test || echo "⚠️ No frontend tests yet"

      # ---- BACKEND ----
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Test backend
        working-directory: ./backend
        run: npm test || echo "⚠️ No backend tests yet"

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region us-west-2 \
            | docker login --username AWS --password-stdin 778230822028.dkr.ecr.us-west-2.amazonaws.com

      - name: Build and push frontend-prod
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest

      - name: Build and push backend-prod
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest
          docker push 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest

      - name: Deploy prod on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install docker if not present
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            # Ensure docker service is running
            sudo systemctl start docker
            
            cd ~/portfolio
            COMPOSE_PROFILES=prod docker compose pull
            COMPOSE_PROFILES=prod docker compose up -d

  rebuild-dev:
    if: github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Rebuild dev on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Clone or update the repository
            cd $HOME
            if [ ! -d "portfolio" ]; then
              git clone https://github.com/BBaysinger/bb-portfolio.git portfolio
            else
              cd portfolio
              git fetch origin
              git checkout dev
              git reset --hard origin/dev
              cd ..
            fi
            
            # Navigate to portfolio directory and deploy
            cd $HOME/portfolio
            COMPOSE_PROFILES=dev docker-compose up -d --build
