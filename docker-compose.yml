# =============================================================================
# Docker Compose Configuration - BB Portfolio Site
# =============================================================================
#
# This configuration supports multiple deployment environments using profiles:
# - Local development (MacBook) with hot reload and volume mounts
# - AWS EC2 development sandbox with builds on EC2
# - AWS EC2 production with pre-built ECR images
#
# QUICK START - Local Development:
# --------------------------------
# 1. Build and start services:
#    COMPOSE_PROFILES=local docker compose up --build
#
# 2. Access your applications:
#    - Frontend: http://localhost:5051 (with hot reload)
#    - Backend:  http://localhost:5050 (with auto-restart)
#
# 3. Stop services:
#    COMPOSE_PROFILES=local docker compose down
#
# USAGE BY ENVIRONMENT:
# ---------------------
#   ▶ Local Development (MacBook):
#     COMPOSE_PROFILES=local docker compose up --build
#
#   ▶ AWS EC2 Production Only:
#     COMPOSE_PROFILES=prod docker compose up -d
#
#   ▶ AWS EC2 Development Only:
#     COMPOSE_PROFILES=dev docker compose up -d --build
#
#   ▶ AWS EC2 Both Environments:
#     COMPOSE_PROFILES=prod,dev docker compose up -d
#
# DEPLOYMENT STRATEGY:
# -------------------
#   ▶ Production: Automated via CI/CD on main branch
#     - Uses pre-built ECR images for fast, reliable deployments
#     - Images are built, tested, and pushed by GitHub Actions
#     - Zero build time on EC2, atomic deployments
#
#   ▶ Development: Manual trigger via workflow_dispatch
#     - Builds directly on EC2 for flexibility
#     - No ECR push, saves CI/CD minutes and complexity
#     - Perfect for testing and iteration
#
# =============================================================================

services:
  # =============================================================================
  # PRODUCTION SERVICES (AWS EC2)
  # =============================================================================
  # These services run optimized production builds with:
  # - Pre-built ECR images (no build time on deployment)
  # - Health checks for reliability and load balancer integration
  # - Automatic restart policies for high availability
  # - Production environment variables and secrets
  # - Atomic deployments via docker compose pull + up -d
  # =============================================================================

  backend-prod:
    profiles: ["prod"] # Only runs with COMPOSE_PROFILES=prod
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/bb-portfolio-backend:latest
    container_name: portfolio-backend-prod
    ports:
      - "3001:3000" # Backend gets xxx1 for production
    environment:
      # Core backend environment
      - NODE_ENV=production
      - ENV_PROFILE=prod
      - PORT=3000
      # Backend database and security configuration
      - PROD_MONGODB_URI=${PROD_MONGODB_URI}
      - PROD_PAYLOAD_SECRET=${PROD_PAYLOAD_SECRET}
      - PROD_FRONTEND_URL=${PROD_FRONTEND_URL}
      # AWS S3 Configuration for Payload uploads
      - S3_AWS_ACCESS_KEY_ID=${S3_AWS_ACCESS_KEY_ID}
      - S3_AWS_SECRET_ACCESS_KEY=${S3_AWS_SECRET_ACCESS_KEY}
      - PROD_AWS_REGION=${PROD_AWS_REGION}
      - PROD_S3_BUCKET=${PROD_S3_BUCKET}
    env_file:
      - ./backend/.env.prod
    restart: unless-stopped # Auto-restart on failure/reboot
    healthcheck: # Health monitoring for load balancers
      test:
        [
          "CMD",
          "node",
          "-e",
          "const net = require('net'); const client = net.createConnection(3000, 'localhost', () => { console.log('connected'); client.end(); process.exit(0); }); client.on('error', () => process.exit(1));",
        ]
      interval: 15s # Check every 15 seconds (faster)
      timeout: 5s # 5 second timeout per check
      retries: 25 # 25 failed checks = unhealthy (more retries)
      start_period: 30s # Wait 30s before first check (reduced)

  frontend-prod:
    profiles: ["prod"] # Only runs with COMPOSE_PROFILES=prod
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/bb-portfolio-frontend:latest
    container_name: portfolio-frontend-prod
    ports:
      - "3000:3000" # Frontend gets xxx0 for production
    environment:
      # Core Next.js environment
      - NODE_ENV=production
      - ENV_PROFILE=prod
      # Backend connection URLs - these MUST be set for the app to work
      - PROD_BACKEND_INTERNAL_URL=${PROD_BACKEND_INTERNAL_URL}
      - PROD_NEXT_PUBLIC_BACKEND_URL=${PROD_NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_BACKEND_URL=${PROD_NEXT_PUBLIC_BACKEND_URL}
    # Also load from .env.prod file as backup
    env_file:
      - ./frontend/.env.prod
    restart: unless-stopped # Auto-restart on failure/reboot
    depends_on:
      backend-prod:
        condition: service_started # Just wait for backend to start, not be healthy
    healthcheck: # Health monitoring for load balancers
      test:
        [
          "CMD",
          "node",
          "-e",
          "const net = require('net'); const client = net.createConnection(3000, 'localhost', () => { console.log('connected'); client.end(); process.exit(0); }); client.on('error', () => process.exit(1));",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # DEVELOPMENT SERVICES (AWS EC2 Sandbox)
  # =============================================================================
  # These services run on EC2 for remote development/testing:
  # - Pull pre-built images from Docker Hub (fast deployments)
  # - Images built and pushed via CI/CD on dev branch pushes
  # - Different ports to avoid conflicts with production
  # - Cost-optimized using free Docker Hub public repositories
  # - Provides experience with dual-registry strategy (Docker Hub + ECR)
  # =============================================================================

  backend-dev:
    profiles: ["dev"] # Only runs with COMPOSE_PROFILES=dev
    image: bhbaysinger/portfolio-backend:dev # Pre-built image from Docker Hub
    container_name: portfolio-backend-dev
    ports:
      - "4001:3000" # Backend gets xxx1
    env_file:
      - ./backend/.env.dev
    restart: unless-stopped # Auto-restart on failure/reboot

  frontend-dev:
    profiles: ["dev"] # Only runs with COMPOSE_PROFILES=dev
    image: bhbaysinger/portfolio-frontend:dev # Pre-built image from Docker Hub
    container_name: portfolio-frontend-dev
    ports:
      - "4000:3000" # Frontend gets xxx0
    env_file:
      - ./frontend/.env.dev
    restart: unless-stopped # Auto-restart on failure/reboot
    depends_on:
      backend-dev:
        condition: service_started # Wait for backend (no health check needed)

  # =============================================================================
  # LOCAL DEVELOPMENT SERVICES (MacBook)
  # =============================================================================
  # These services are optimized for local development with:
  # - Hot reload and auto-restart capabilities
  # - Volume mounts for live code editing (no rebuild needed)
  # - Development builds with full dependencies and debugging tools
  # - File watching for automatic updates via CHOKIDAR_USEPOLLING
  # - Named volumes to preserve node_modules across container restarts
  # =============================================================================

  backend-local:
    profiles: ["local"]
    image: bhbaysinger/portfolio-backend:dev
    container_name: backend-local
    # Run Next.js dev directly to avoid double-watching and full process
    # restarts from nodemon (which can break Server Actions during edits)
    command: npm run dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5051:3001"
    env_file:
      - ./backend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped

  frontend-local:
    profiles: ["local"]
    image: bhbaysinger/portfolio-frontend:dev
    container_name: frontend-local
    command: npm run dev
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "5050:3000"
    env_file:
      - ./frontend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped
    depends_on:
      backend-local:
        condition: service_started

  # =============================================================================
  # LOCAL (MacBook) DEVELOPMENT SERVICES WITH SGG GENERATION
  # =============================================================================

  backend-local-ssg-generate:
    profiles: ["local-ssg"]
    image: bhbaysinger/portfolio-backend:dev
    container_name: backend-local-ssg-generate
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5151:3001"
    env_file:
      - ./backend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped

  frontend-local-ssg-generate:
    profiles: ["local-ssg"]
    image: bhbaysinger/portfolio-frontend:dev
    container_name: frontend-local-ssg-generate
    command: sh -c "npm run build:when-ready && npm start"
    volumes:
      - ./frontend:/app
      # - frontend_node_modules:/app/node_modules
    ports:
      - "5150:3000"
    env_file:
      - ./frontend/.env
    environment:
      - CHOKIDAR_USEPOLLING=true
      - BACKEND_INTERNAL_URL=http://backend-local-ssg-generate:3001
      - NEXT_PUBLIC_BACKEND_URL=http://backend-local-ssg-generate:3001
    restart: unless-stopped
    depends_on:
      backend-local-ssg-generate:
        condition: service_started

# =============================================================================
# NETWORKING & STORAGE
# =============================================================================

# Custom network for service isolation and communication
networks:
  default:
    name: portfolio-network # Named network for better organization

# Named volumes for persistent data
volumes:
  # Preserves frontend node_modules in local development
  # Prevents host directory from overriding container's installed dependencies
  frontend_node_modules: # Used by frontend-local service
