# =============================================================================
# Docker Compose Configuration - BB Portfolio Site
# =============================================================================
#
# This configuration supports multiple deployment environments using profiles:
# - Local development (MacBook) with hot reload and volume mounts
# - AWS EC2 development sandbox with builds on EC2
# - AWS EC2 production with pre-built ECR images
#
# QUICK START - Local Development:
# --------------------------------
# 1. Build and start services:
#    COMPOSE_PROFILES=local docker compose up --build
#
# 2. Access your applications:
#    - Frontend: http://localhost:5051 (with hot reload)
#    - Backend:  http://localhost:5050 (with auto-restart)
#
# 3. Stop services:
#    COMPOSE_PROFILES=local docker compose down
#
# USAGE BY ENVIRONMENT:
# ---------------------
#   ▶ Local Development (MacBook):
#     COMPOSE_PROFILES=local docker compose up --build
#
#   ▶ AWS EC2 Production Only:
#     COMPOSE_PROFILES=prod docker compose up -d
#
#   ▶ AWS EC2 Development Only:
#     COMPOSE_PROFILES=dev docker compose up -d --build
#
#   ▶ AWS EC2 Both Environments:
#     COMPOSE_PROFILES=prod,dev docker compose up -d
#
# DEPLOYMENT STRATEGY:
# -------------------
#   ▶ Production: Automated via CI/CD on main branch
#     - Uses pre-built ECR images for fast, reliable deployments
#     - Images are built, tested, and pushed by GitHub Actions
#     - Zero build time on EC2, atomic deployments
#
#   ▶ Development: Manual trigger via workflow_dispatch
#     - Builds directly on EC2 for flexibility
#     - No ECR push, saves CI/CD minutes and complexity
#     - Perfect for testing and iteration
#
# =============================================================================

services:
  # =============================================================================
  # PRODUCTION SERVICES (AWS EC2)
  # =============================================================================
  # These services run optimized production builds with:
  # - Pre-built ECR images (no build time on deployment)
  # - Health checks for reliability and load balancer integration  
  # - Automatic restart policies for high availability
  # - Production environment variables and secrets
  # - Atomic deployments via docker compose pull + up -d
  # =============================================================================

  backend-prod:
    profiles: ["prod"] # Only runs with COMPOSE_PROFILES=prod
    image: 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/backend:latest
    container_name: portfolio-backend-prod
    ports:
      - "3000:3000" # Direct port mapping for production
    env_file:
      - ./backend/.env.prod # Production environment variables
    restart: unless-stopped # Auto-restart on failure/reboot
    healthcheck: # Health monitoring for load balancers
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s # Check every 30 seconds
      timeout: 10s # 10 second timeout per check
      retries: 3 # 3 failed checks = unhealthy
      start_period: 40s # Wait 40s before first check

  frontend-prod:
    profiles: ["prod"] # Only runs with COMPOSE_PROFILES=prod
    image: 778230822028.dkr.ecr.us-west-2.amazonaws.com/portfolio/frontend:latest
    container_name: portfolio-frontend-prod
    ports:
      - "3001:3000" # Avoid port conflict with backend
    env_file:
      - ./frontend/.env.prod # Production environment variables
    restart: unless-stopped # Auto-restart on failure/reboot
    depends_on:
      backend-prod:
        condition: service_healthy # Wait for backend health check
    healthcheck: # Health monitoring for load balancers
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DEVELOPMENT SERVICES (AWS EC2 Sandbox)
  # =============================================================================
  # These services run on EC2 for remote development/testing:
  # - Build directly on EC2 for flexibility and speed
  # - Different ports to avoid conflicts with production
  # - Simpler health checks (no load balancer integration needed)
  # - Manual deployment via workflow_dispatch or SSH
  # - Perfect for testing production builds in a live environment
  # =============================================================================

  backend-dev:
    profiles: ["dev"] # Only runs with COMPOSE_PROFILES=dev
    build:
      context: ./backend # Build from backend directory
      dockerfile: Dockerfile # Uses production build (default stage)
    image: portfolio-backend-dev # Tagged image name
    container_name: portfolio-backend-dev
    ports:
      - "4000:3000" # Different port to avoid prod conflicts
    env_file:
      - ./backend/.env.dev # Development environment variables
    restart: unless-stopped # Auto-restart on failure/reboot

  frontend-dev:
    profiles: ["dev"] # Only runs with COMPOSE_PROFILES=dev
    build:
      context: ./frontend # Build from frontend directory  
      dockerfile: Dockerfile # Uses production build (default stage)
    image: portfolio-frontend-dev # Tagged image name
    container_name: portfolio-frontend-dev
    ports:
      - "4001:3000" # Different port to avoid prod conflicts
    env_file:
      - ./frontend/.env.dev # Development environment variables
    restart: unless-stopped # Auto-restart on failure/reboot
    depends_on:
      backend-dev:
        condition: service_started # Wait for backend (no health check needed)

  # =============================================================================
  # LOCAL DEVELOPMENT SERVICES (MacBook)
  # =============================================================================
  # These services are optimized for local development with:
  # - Hot reload and auto-restart capabilities
  # - Volume mounts for live code editing (no rebuild needed)
  # - Development builds with full dependencies and debugging tools
  # - File watching for automatic updates via CHOKIDAR_USEPOLLING
  # - Named volumes to preserve node_modules across container restarts
  # =============================================================================

  portfolio-backend-local:
    profiles: ["local"] # Only runs with COMPOSE_PROFILES=local
    build:
      context: ./backend # Build from backend directory
      dockerfile: Dockerfile # Uses multi-stage Dockerfile
      target: dev # Target the 'dev' stage (includes nodemon + dev deps)
    image: portfolio-backend-local # Tagged image name
    container_name: portfolio-backend-local
    volumes:
      # Mount source code for live editing
      - ./backend:/app # Host ./backend -> Container /app
      # Preserve container's node_modules (avoid host override)
      - /app/node_modules # Anonymous volume for dependencies
    ports:
      - "5050:3000" # Host port 5050 -> Container port 3000
    env_file:
      - ./backend/.env.local # Local development environment variables
    environment:
      # Enable file watching in Docker (required for volume mounts)
      - CHOKIDAR_USEPOLLING=true # Enables cross-platform file watching
    restart: unless-stopped # Auto-restart container on failure
    # Note: nodemon handles auto-restart on file changes via Dockerfile CMD

  frontend-local:
    profiles: ["local"] # Only runs with COMPOSE_PROFILES=local
    build:
      context: ./frontend # Build from frontend directory
      dockerfile: Dockerfile # Uses multi-stage Dockerfile
      target: dev # Target the 'dev' stage (includes dev dependencies)
    image: portfolio-frontend-local # Tagged image name
    container_name: portfolio-frontend-local
    command: npm run dev # Override CMD to run Next.js dev server
    volumes:
      # Mount source code for live editing
      - ./frontend:/app # Host ./frontend -> Container /app
      # Preserve container's node_modules with named volume
      - frontend_node_modules:/app/node_modules # Named volume prevents host override
    ports:
      - "5051:3000" # Host port 5051 -> Container port 3000
    env_file:
      - ./frontend/.env.local # Local development environment variables
    environment:
      # Enable file watching in Docker (required for hot reload)
      - CHOKIDAR_USEPOLLING=true # Enables cross-platform file watching
    restart: unless-stopped # Auto-restart container on failure
    depends_on:
      portfolio-backend-local:
        condition: service_started # Wait for backend to start first

# =============================================================================
# NETWORKING & STORAGE
# =============================================================================

# Custom network for service isolation and communication
networks:
  default:
    name: portfolio-network # Named network for better organization

# Named volumes for persistent data  
volumes:
  # Preserves frontend node_modules in local development
  # Prevents host directory from overriding container's installed dependencies
  frontend_node_modules: # Used by frontend-local service
