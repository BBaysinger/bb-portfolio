#!/usr/bin/env tsx

/**
 * Generate terraform.tfvars from github-secrets.private.json5
 *
 * This script reads the secrets from github-secrets.private.json5 and generates
 * a terraform.tfvars file with the appropriate values, ensuring single source of truth.
 *
 * Usage: npx tsx scripts/iac/generate-terraform-vars.ts [--secrets <path>] [--out <path>]
 *  - --secrets, -s: Optional path to .github-secrets.private.json5 (relative to repo root or absolute)
 *  - --out,     -o: Optional path to output terraform.tfvars (relative to repo root or absolute)
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

import JSON5 from "json5";

// Resolve project root and CLI overrides
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Prefer the current working directory as the repo root, with a fallback to two levels up from this script
const cwd = process.cwd();
const fallbackRoot = path.resolve(__dirname, "..", "..");

function looksLikeRepoRoot(dir: string): boolean {
  // Heuristics: has a package.json and an infra folder
  try {
    return (
      fs.existsSync(path.join(dir, "package.json")) &&
      fs.existsSync(path.join(dir, "infra"))
    );
  } catch {
    return false;
  }
}

let projectRoot = looksLikeRepoRoot(cwd) ? cwd : fallbackRoot;

const args = process.argv.slice(2);
function getArg(longFlag: string, shortFlag: string): string | undefined {
  const iLong = args.indexOf(longFlag);
  const iShort = args.indexOf(shortFlag);
  const i = iLong !== -1 ? iLong : iShort;
  if (i !== -1 && args[i + 1] && !args[i + 1].startsWith("-"))
    return args[i + 1];
  return undefined;
}

function resolveFromRoot(p: string): string {
  return path.isAbsolute(p) ? p : path.join(projectRoot, p);
}

const secretsArg = getArg("--secrets", "-s");
const outArg = getArg("--out", "-o");

// Paths (with CLI overrides)
const secretsFile = secretsArg
  ? resolveFromRoot(secretsArg)
  : path.join(projectRoot, ".github-secrets.private.json5");
const terraformVarsFile = outArg
  ? resolveFromRoot(outArg)
  : path.join(projectRoot, "infra", "terraform.tfvars");

interface SecretsConfig {
  strings: Record<string, string>;
  files: Record<string, string>;
}

function loadSecrets(): SecretsConfig {
  if (!fs.existsSync(secretsFile)) {
    throw new Error(`Secrets file not found: ${secretsFile}`);
  }

  const content = fs.readFileSync(secretsFile, "utf-8");

  // Use JSON5 package for proper parsing
  try {
    return JSON5.parse(content);
  } catch (error) {
    throw new Error(`Failed to parse secrets file: ${error}`);
  }
}

function generateTerraformVars(secrets: SecretsConfig): string {
  const { strings } = secrets;

  // Base configuration (non-secret values)
  const baseConfig = `# =============================================================================
# Terraform Variables - Auto-generated from github-secrets.private.json5
# =============================================================================
# 
# This file is generated by scripts/generate-terraform-vars.ts
# DO NOT EDIT MANUALLY - changes will be overwritten
#
# To update values, edit .github-secrets.private.json5 and run:
# npx tsx scripts/generate-terraform-vars.ts
# =============================================================================

# Infrastructure Configuration
region        = "us-west-2"
instance_type = "t3.micro"
key_name      = "bb-portfolio-site-key"
ami_id        = "ami-0cf2b4e024cdb6960" # Amazon Linux 2023 in us-west-2 (as of Sept 2025)
project_name  = "bb-portfolio"

# S3 Media Buckets Configuration
media_envs = ["dev", "prod"]

# CORS origins permitted to read from S3 directly (GET/HEAD)
media_cors_allowed_origins = [
  "http://localhost:3000",
  "http://localhost:3001",
  "http://44.250.92.40:3000",
  "http://44.250.92.40:3001",
  "http://44.250.92.40:4000",
  "http://44.250.92.40:4001",
]

`;

  // Environment variables from secrets
  const envVars = `# =============================================================================
# Environment Variables (from github-secrets.private.json5)
# =============================================================================

# AWS Configuration
aws_access_key_id     = "${strings.AWS_ACCESS_KEY_ID}"
aws_secret_access_key = "${strings.AWS_SECRET_ACCESS_KEY}"
prod_aws_region       = "${strings.PROD_AWS_REGION}"

# Database Configuration
prod_mongodb_uri = "${strings.PROD_MONGODB_URI}"

# Payload CMS Configuration
prod_payload_secret = "${strings.PROD_PAYLOAD_SECRET}"

# S3 Media Configuration
prod_s3_bucket = "${strings.PROD_S3_BUCKET}"

# Frontend URLs
prod_frontend_url              = "${strings.PROD_FRONTEND_URL}"
prod_next_public_backend_url   = "${strings.PROD_NEXT_PUBLIC_BACKEND_URL}"
prod_backend_internal_url      = "${strings.PROD_BACKEND_INTERNAL_URL}"

# Email Configuration
prod_ses_from_email = "${strings.PROD_SES_FROM_EMAIL}"
prod_ses_to_email   = "${strings.PROD_SES_TO_EMAIL}"

# =============================================================================
# Development Environment Variables
# =============================================================================

# AWS Configuration
dev_aws_region = "${strings.DEV_AWS_REGION}"

# Database Configuration
dev_mongodb_uri = "${strings.DEV_MONGODB_URI}"

# Payload CMS Configuration
dev_payload_secret = "${strings.DEV_PAYLOAD_SECRET}"

# S3 Media Configuration
dev_s3_bucket = "${strings.DEV_S3_BUCKET}"

# Backend URLs
dev_backend_internal_url = "${strings.DEV_BACKEND_INTERNAL_URL}"

# Email Configuration
dev_ses_from_email = "${strings.DEV_SES_FROM_EMAIL}"
dev_ses_to_email   = "${strings.DEV_SES_TO_EMAIL}"
`;

  return baseConfig + envVars;
}

function main() {
  try {
    console.log(
      "üîÑ Generating terraform.tfvars from github-secrets.private.json5..."
    );
    console.log("Project root:", projectRoot);
    console.log("Secrets file:", secretsFile);

    // Load secrets
    const secrets = loadSecrets();
    console.log("‚úÖ Loaded secrets configuration");

    // Generate terraform vars content
    const terraformVarsContent = generateTerraformVars(secrets);

    // Ensure infra directory exists
    const infraDir = path.dirname(terraformVarsFile);
    if (!fs.existsSync(infraDir)) {
      fs.mkdirSync(infraDir, { recursive: true });
    }

    // Write terraform.tfvars file
    fs.writeFileSync(terraformVarsFile, terraformVarsContent);
    console.log("‚úÖ Generated terraform.tfvars");

    // Verify required variables are present
    const requiredVars = [
      "aws_access_key_id",
      "aws_secret_access_key",
      "prod_mongodb_uri",
      "prod_payload_secret",
      "prod_s3_bucket",
      "prod_frontend_url",
      "prod_next_public_backend_url",
      "prod_backend_internal_url",
      "prod_ses_from_email",
      "prod_ses_to_email",
      "dev_aws_region",
      "dev_mongodb_uri",
      "dev_payload_secret",
      "dev_s3_bucket",
      "dev_backend_internal_url",
      "dev_ses_from_email",
      "dev_ses_to_email",
    ];

    const missingVars = requiredVars.filter((varName) => {
      const secretKey = varName.toUpperCase();
      return !secrets.strings[secretKey];
    });

    if (missingVars.length > 0) {
      console.warn("‚ö†Ô∏è  Missing required variables in secrets file:");
      missingVars.forEach((varName) =>
        console.warn(`   - ${varName.toUpperCase()}`)
      );
    } else {
      console.log("‚úÖ All required variables are present");
    }

    console.log("üéâ terraform.tfvars generated successfully!");
    console.log(`üìÅ Location: ${terraformVarsFile}`);
  } catch (error) {
    console.error("‚ùå Error generating terraform.tfvars:", error);
    process.exit(1);
  }
}

// Run main function
main();
